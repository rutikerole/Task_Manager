{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rutik\\\\Desktop\\\\taskmanger_app\\\\frontend\\\\src\\\\pages\\\\TaskPage.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { FaCheckCircle, FaEdit, FaTrash, FaUndoAlt } from \"react-icons/fa\";\nimport \"./TaskPage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskPage() {\n  _s();\n  const [newTask, setNewTask] = useState(\"\"); // for storing value typed into the input field.\n\n  const [tasks, setTasks] = useState([]); // for storing all the tasks in backend\n  const [editIndex, setEditIndex] = useState(null); // for storing index of task edited\n\n  const apiURL = \"http://localhost:5000/tasks\"; // this is the base URL to connect to your backend\n\n  // here we fetching our all tasks from backend\n  useEffect(() => {\n    fetch(apiURL).then(res => res.json()).then(data => setTasks(data));\n  }, []);\n\n  // when we click add or adit new task will be add\n  const addTask = () => {\n    if (newTask.trim() === \"\") return; // Prevents adding empty tasks.\n\n    const taskObject = {\n      text: newTask,\n      completed: false\n    };\n    if (editIndex !== null) {\n      // We update the task at editIndex, then update the state.\n      const updatedTasks = [...tasks]; // get all tasks in updated task\n      updatedTasks[editIndex].text = newTask; // from edit index we find our task then edit or changed it\n      setTasks(updatedTasks); // set our task again\n\n      fetch(`${apiURL}/${editIndex}`, {\n        // Sends the updated task to the backend.\n        method: \"PUT\",\n        // PUT is method that we use for Update something\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(updatedTasks[editIndex]) // here is data which want to send backend\n      });\n      setEditIndex(null);\n    } else {\n      // Sends a new task to the backend and adds it to the list.\n      fetch(apiURL, {\n        method: \"POST\",\n        // Post is method that we are used Add something new\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(taskObject) // here is data which want to send backend\n      }).then(() => setTasks([...tasks, taskObject])); // After the task is successfully added (POST done), update the UI state by adding it to the tasks array.\"\n    }\n    setNewTask(\"\");\n  };\n\n  // Handle pressing the Enter key to add a task\n  const handleKeyPress = e => {\n    if (e.key === \"Enter\") {\n      addTask();\n    }\n  };\n  const handleDelete = index => {\n    fetch(`${apiURL}/${index}`, {\n      method: \"DELETE\"\n    }).then(() => {\n      const updated = tasks.filter((_, i) => i !== index); // Removes the task from the UI using filter.\n      setTasks(updated);\n    });\n  };\n\n  // when we click on edit\n  const handleEdit = index => {\n    setNewTask(tasks[index].text); // Prefills the input with selected task then its accessable to edit in input feild\n    setEditIndex(index); // Sets the index of task to be edited, The editIndex gets set so the app knows we are now in edit mode.\n  };\n  const toggleComplete = index => {\n    const updatedTasks = [...tasks]; // We create a copy of the current tasks array (so we donâ€™t directly mutate the state).\n    updatedTasks[index].completed = !updatedTasks[index].completed; // this line toggle completed value, if its true then false, if it falsethen make it true\n    setTasks(updatedTasks);\n    fetch(`${apiURL}/${index}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(updatedTasks[index])\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Manage Your Tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter a task...\",\n          value: newTask,\n          onChange: e => setNewTask(e.target.value),\n          onKeyDown: handleKeyPress // Detect the Enter key press\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addTask,\n          children: editIndex !== null ? \"Update\" : \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"task-list\",\n        children: tasks.map((task, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"task-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: task.completed ? \"completed\" : \"\",\n            children: task.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"icon-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => toggleComplete(i),\n              title: \"Complete\",\n              children: task.completed ? /*#__PURE__*/_jsxDEV(FaUndoAlt, {\n                className: \"icon undo\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(FaCheckCircle, {\n                className: \"icon complete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleEdit(i),\n              title: \"Edit\",\n              children: /*#__PURE__*/_jsxDEV(FaEdit, {\n                className: \"icon edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleDelete(i),\n              title: \"Delete\",\n              children: /*#__PURE__*/_jsxDEV(FaTrash, {\n                className: \"icon delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskPage, \"vK7/qIXfI9NaJNmFyyhwruuVXY4=\");\n_c = TaskPage;\nexport default TaskPage;\nvar _c;\n$RefreshReg$(_c, \"TaskPage\");","map":{"version":3,"names":["useEffect","useState","FaCheckCircle","FaEdit","FaTrash","FaUndoAlt","jsxDEV","_jsxDEV","TaskPage","_s","newTask","setNewTask","tasks","setTasks","editIndex","setEditIndex","apiURL","fetch","then","res","json","data","addTask","trim","taskObject","text","completed","updatedTasks","method","headers","body","JSON","stringify","handleKeyPress","e","key","handleDelete","index","updated","filter","_","i","handleEdit","toggleComplete","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","target","onKeyDown","onClick","map","task","title","_c","$RefreshReg$"],"sources":["C:/Users/rutik/Desktop/taskmanger_app/frontend/src/pages/TaskPage.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { FaCheckCircle, FaEdit, FaTrash, FaUndoAlt } from \"react-icons/fa\";\r\nimport \"./TaskPage.css\";\r\n\r\nfunction TaskPage() {\r\n  const [newTask, setNewTask] = useState(\"\"); // for storing value typed into the input field.\r\n  \r\n  const [tasks, setTasks] = useState([]);     // for storing all the tasks in backend\r\n  const [editIndex, setEditIndex] = useState(null);// for storing index of task edited\r\n\r\n  const apiURL = \"http://localhost:5000/tasks\";  // this is the base URL to connect to your backend\r\n\r\n  // here we fetching our all tasks from backend\r\n  useEffect(() => {\r\n    fetch(apiURL)\r\n      .then((res) => res.json())\r\n      .then((data) => setTasks(data));\r\n  }, []);\r\n\r\n\r\n  // when we click add or adit new task will be add\r\n  const addTask = () => {\r\n    if (newTask.trim() === \"\") return;          // Prevents adding empty tasks.\r\n\r\n    const taskObject = { text: newTask, completed: false };\r\n\r\n    if (editIndex !== null) {              // We update the task at editIndex, then update the state.\r\n      const updatedTasks = [...tasks];     // get all tasks in updated task\r\n      updatedTasks[editIndex].text = newTask;   // from edit index we find our task then edit or changed it\r\n      setTasks(updatedTasks);           // set our task again\r\n\r\n      fetch(`${apiURL}/${editIndex}`, {    // Sends the updated task to the backend.\r\n        method: \"PUT\",                     // PUT is method that we use for Update something\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(updatedTasks[editIndex]),     // here is data which want to send backend\r\n      });\r\n\r\n      setEditIndex(null);\r\n\r\n    } else {                       // Sends a new task to the backend and adds it to the list.\r\n      fetch(apiURL, {\r\n        method: \"POST\",            // Post is method that we are used Add something new\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(taskObject),       // here is data which want to send backend\r\n      }).then(() => setTasks([...tasks, taskObject])); // After the task is successfully added (POST done), update the UI state by adding it to the tasks array.\"\r\n    }\r\n\r\n    setNewTask(\"\");\r\n  };\r\n\r\n  // Handle pressing the Enter key to add a task\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      addTask();\r\n    }\r\n  };\r\n\r\n  const handleDelete = (index) => {\r\n    fetch(`${apiURL}/${index}`, { method: \"DELETE\" }).then(() => {\r\n      const updated = tasks.filter((_, i) => i !== index);     // Removes the task from the UI using filter.\r\n      setTasks(updated);\r\n    });\r\n  };\r\n\r\n  // when we click on edit\r\n  const handleEdit = (index) => { \r\n    setNewTask(tasks[index].text);   // Prefills the input with selected task then its accessable to edit in input feild\r\n    setEditIndex(index);      // Sets the index of task to be edited, The editIndex gets set so the app knows we are now in edit mode.\r\n  };\r\n\r\n  const toggleComplete = (index) => {\r\n    const updatedTasks = [...tasks];    // We create a copy of the current tasks array (so we donâ€™t directly mutate the state).\r\n    updatedTasks[index].completed = !updatedTasks[index].completed;   // this line toggle completed value, if its true then false, if it falsethen make it true\r\n    setTasks(updatedTasks);\r\n\r\n    fetch(`${apiURL}/${index}`, {\r\n      method: \"PUT\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(updatedTasks[index]),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"task-container\">\r\n      <div className=\"task-card\">\r\n        <h2>Manage Your Tasks</h2>\r\n\r\n        <div className=\"input-area\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter a task...\"\r\n            value={newTask}\r\n            onChange={(e) => setNewTask(e.target.value)}\r\n            onKeyDown={handleKeyPress}                // Detect the Enter key press\r\n          />\r\n          <button onClick={addTask}>\r\n            {editIndex !== null ? \"Update\" : \"Add\"}\r\n          </button>\r\n        </div>\r\n\r\n        <ul className=\"task-list\">\r\n          {tasks.map((task, i) => (\r\n            <li key={i} className=\"task-item\">\r\n              <span className={task.completed ? \"completed\" : \"\"}>\r\n                {task.text}\r\n              </span>\r\n\r\n              <div className=\"icon-group\">\r\n                <button onClick={() => toggleComplete(i)} title=\"Complete\">\r\n                  {task.completed ? (\r\n                    <FaUndoAlt className=\"icon undo\" />\r\n                  ) : (\r\n                    <FaCheckCircle className=\"icon complete\" />\r\n                  )}\r\n                </button>\r\n                <button onClick={() => handleEdit(i)} title=\"Edit\">\r\n                  <FaEdit className=\"icon edit\" />\r\n                </button>\r\n                <button onClick={() => handleDelete(i)} title=\"Delete\">\r\n                  <FaTrash className=\"icon delete\" />\r\n                </button>\r\n              </div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskPage;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,aAAa,EAAEC,MAAM,EAAEC,OAAO,EAAEC,SAAS,QAAQ,gBAAgB;AAC1E,OAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE5C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAK;EAC5C,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC,CAAC;;EAEjD,MAAMe,MAAM,GAAG,6BAA6B,CAAC,CAAE;;EAE/C;EACAhB,SAAS,CAAC,MAAM;IACdiB,KAAK,CAACD,MAAM,CAAC,CACVE,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAKR,QAAQ,CAACQ,IAAI,CAAC,CAAC;EACnC,CAAC,EAAE,EAAE,CAAC;;EAGN;EACA,MAAMC,OAAO,GAAGA,CAAA,KAAM;IACpB,IAAIZ,OAAO,CAACa,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,OAAO,CAAU;;IAE5C,MAAMC,UAAU,GAAG;MAAEC,IAAI,EAAEf,OAAO;MAAEgB,SAAS,EAAE;IAAM,CAAC;IAEtD,IAAIZ,SAAS,KAAK,IAAI,EAAE;MAAe;MACrC,MAAMa,YAAY,GAAG,CAAC,GAAGf,KAAK,CAAC,CAAC,CAAK;MACrCe,YAAY,CAACb,SAAS,CAAC,CAACW,IAAI,GAAGf,OAAO,CAAC,CAAG;MAC1CG,QAAQ,CAACc,YAAY,CAAC,CAAC,CAAW;;MAElCV,KAAK,CAAC,GAAGD,MAAM,IAAIF,SAAS,EAAE,EAAE;QAAK;QACnCc,MAAM,EAAE,KAAK;QAAsB;QACnCC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,YAAY,CAACb,SAAS,CAAC,CAAC,CAAM;MACrD,CAAC,CAAC;MAEFC,YAAY,CAAC,IAAI,CAAC;IAEpB,CAAC,MAAM;MAAwB;MAC7BE,KAAK,CAACD,MAAM,EAAE;QACZY,MAAM,EAAE,MAAM;QAAa;QAC3BC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,UAAU,CAAC,CAAQ;MAC1C,CAAC,CAAC,CAACN,IAAI,CAAC,MAAML,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAEY,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;IACnD;IAEAb,UAAU,CAAC,EAAE,CAAC;EAChB,CAAC;;EAED;EACA,MAAMsB,cAAc,GAAIC,CAAC,IAAK;IAC5B,IAAIA,CAAC,CAACC,GAAG,KAAK,OAAO,EAAE;MACrBb,OAAO,CAAC,CAAC;IACX;EACF,CAAC;EAED,MAAMc,YAAY,GAAIC,KAAK,IAAK;IAC9BpB,KAAK,CAAC,GAAGD,MAAM,IAAIqB,KAAK,EAAE,EAAE;MAAET,MAAM,EAAE;IAAS,CAAC,CAAC,CAACV,IAAI,CAAC,MAAM;MAC3D,MAAMoB,OAAO,GAAG1B,KAAK,CAAC2B,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,KAAKJ,KAAK,CAAC,CAAC,CAAK;MACzDxB,QAAQ,CAACyB,OAAO,CAAC;IACnB,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMI,UAAU,GAAIL,KAAK,IAAK;IAC5B1B,UAAU,CAACC,KAAK,CAACyB,KAAK,CAAC,CAACZ,IAAI,CAAC,CAAC,CAAG;IACjCV,YAAY,CAACsB,KAAK,CAAC,CAAC,CAAM;EAC5B,CAAC;EAED,MAAMM,cAAc,GAAIN,KAAK,IAAK;IAChC,MAAMV,YAAY,GAAG,CAAC,GAAGf,KAAK,CAAC,CAAC,CAAI;IACpCe,YAAY,CAACU,KAAK,CAAC,CAACX,SAAS,GAAG,CAACC,YAAY,CAACU,KAAK,CAAC,CAACX,SAAS,CAAC,CAAG;IAClEb,QAAQ,CAACc,YAAY,CAAC;IAEtBV,KAAK,CAAC,GAAGD,MAAM,IAAIqB,KAAK,EAAE,EAAE;MAC1BT,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,YAAY,CAACU,KAAK,CAAC;IAC1C,CAAC,CAAC;EACJ,CAAC;EAED,oBACE9B,OAAA;IAAKqC,SAAS,EAAC,gBAAgB;IAAAC,QAAA,eAC7BtC,OAAA;MAAKqC,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxBtC,OAAA;QAAAsC,QAAA,EAAI;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAE1B1C,OAAA;QAAKqC,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACzBtC,OAAA;UACE2C,IAAI,EAAC,MAAM;UACXC,WAAW,EAAC,iBAAiB;UAC7BC,KAAK,EAAE1C,OAAQ;UACf2C,QAAQ,EAAGnB,CAAC,IAAKvB,UAAU,CAACuB,CAAC,CAACoB,MAAM,CAACF,KAAK,CAAE;UAC5CG,SAAS,EAAEtB,cAAe,CAAgB;QAAA;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3C,CAAC,eACF1C,OAAA;UAAQiD,OAAO,EAAElC,OAAQ;UAAAuB,QAAA,EACtB/B,SAAS,KAAK,IAAI,GAAG,QAAQ,GAAG;QAAK;UAAAgC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eAEN1C,OAAA;QAAIqC,SAAS,EAAC,WAAW;QAAAC,QAAA,EACtBjC,KAAK,CAAC6C,GAAG,CAAC,CAACC,IAAI,EAAEjB,CAAC,kBACjBlC,OAAA;UAAYqC,SAAS,EAAC,WAAW;UAAAC,QAAA,gBAC/BtC,OAAA;YAAMqC,SAAS,EAAEc,IAAI,CAAChC,SAAS,GAAG,WAAW,GAAG,EAAG;YAAAmB,QAAA,EAChDa,IAAI,CAACjC;UAAI;YAAAqB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC,eAEP1C,OAAA;YAAKqC,SAAS,EAAC,YAAY;YAAAC,QAAA,gBACzBtC,OAAA;cAAQiD,OAAO,EAAEA,CAAA,KAAMb,cAAc,CAACF,CAAC,CAAE;cAACkB,KAAK,EAAC,UAAU;cAAAd,QAAA,EACvDa,IAAI,CAAChC,SAAS,gBACbnB,OAAA,CAACF,SAAS;gBAACuC,SAAS,EAAC;cAAW;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC,gBAEnC1C,OAAA,CAACL,aAAa;gBAAC0C,SAAS,EAAC;cAAe;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE;YAC3C;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACK,CAAC,eACT1C,OAAA;cAAQiD,OAAO,EAAEA,CAAA,KAAMd,UAAU,CAACD,CAAC,CAAE;cAACkB,KAAK,EAAC,MAAM;cAAAd,QAAA,eAChDtC,OAAA,CAACJ,MAAM;gBAACyC,SAAS,EAAC;cAAW;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC1B,CAAC,eACT1C,OAAA;cAAQiD,OAAO,EAAEA,CAAA,KAAMpB,YAAY,CAACK,CAAC,CAAE;cAACkB,KAAK,EAAC,QAAQ;cAAAd,QAAA,eACpDtC,OAAA,CAACH,OAAO;gBAACwC,SAAS,EAAC;cAAa;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC7B,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC;QAAA,GAnBCR,CAAC;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAoBN,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACxC,EAAA,CA5HQD,QAAQ;AAAAoD,EAAA,GAARpD,QAAQ;AA8HjB,eAAeA,QAAQ;AAAC,IAAAoD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}